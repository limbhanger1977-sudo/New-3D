<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>BuckFinders ‚Äì Shot Placement Helper</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
  <style>
    :root { --ui-bg: rgba(18,18,18,.75); --ui: #fff; --accent:#ff5252; }
    html,body { height:100%; margin:0; background:#000; }
    model-viewer { width:100%; height:100%; --poster-color:#000; }

    /* UI */
    .hud {
      position: fixed; left: 0; right: 0; bottom: 0;
      display: grid; gap: 8px; grid-template-columns: repeat(4, 1fr);
      padding: 12px; box-sizing: border-box;
      background: linear-gradient(180deg, transparent, rgba(0,0,0,.55));
    }
    .btn {
      appearance:none; border:1px solid rgba(255,255,255,.2); border-radius:10px;
      padding:10px 12px; font:600 14px system-ui, sans-serif; color:var(--ui);
      background:var(--ui-bg); backdrop-filter: blur(6px); cursor:pointer;
    }
    .btn[aria-pressed="true"] { outline:2px solid var(--accent); }

    /* Pins (hotspots are simple HTML elements that stick to the mesh) */
    .pin-entry, .pin-exit {
      width: 12px; height: 12px; border-radius: 50%;
      box-shadow: 0 0 0 3px rgba(0,0,0,.35);
    }
    .pin-entry { background: #ff3131; }     /* red = entry */
    .pin-exit  { background: #ffffff; }     /* white = estimated exit */
    /* little ‚Äúrod‚Äù under the entry pin for readability */
    .pin-entry::after{
      content:""; position:absolute; left:50%; top:12px; transform:translateX(-50%);
      width:2px; height:26px; background:#ff3131; border-radius:2px;
    }

    /* tiny helper label under buttons */
    .hint { grid-column: 1 / -1; color:#bbb; font: 12px/1.3 system-ui, sans-serif; opacity:.8; text-align:center; }
  </style>
</head>
<body>

  <!-- 3D Viewer -->
  <model-viewer id="viewer"
    src="https://raw.githubusercontent.com/limbhanger1977-sudo/Buckfinders-3D/08b82c1bbde8adfdb3180cdb0a9d79955dbc40a7/BuckFinders_Deer.glb"
    ar ar-modes="webxr scene-viewer quick-look"
    camera-controls touch-action="pan-y" auto-rotate
    exposure="1.05" environment-image="neutral"
  >
    <!-- Hotspots (created here so we can just show/hide + move them) -->
    <div id="pinEntry" class="pin-entry" slot="hotspot-entry" style="display:none;"></div>
    <div id="pinExit"  class="pin-exit"  slot="hotspot-exit"  style="display:none;"></div>
  </model-viewer>

  <!-- Controls -->
  <div class="hud">
    <button id="toggleLock" class="btn" aria-pressed="false">üîí Lock pin</button>
    <button id="clear" class="btn">‚ôªÔ∏è Clear</button>
    <button id="toggleVitals" class="btn" aria-pressed="false">ü´Ä Vitals mode</button>
    <button id="help" class="btn">‚ùî Help</button>
    <div class="hint">Tap the deer to place/move the <b>Entry</b> pin. Lock it, then spin the deer to view the estimated <b>Exit</b> point.</div>
  </div>

  <script type="module">
    const mv = document.getElementById('viewer');
    const pinEntry = document.getElementById('pinEntry');
    const pinExit  = document.getElementById('pinExit');
    const toggleLock = document.getElementById('toggleLock');
    const clearBtn   = document.getElementById('clear');
    const toggleVitals = document.getElementById('toggleVitals');
    const helpBtn = document.getElementById('help');

    let locked = false;
    let lastHit = null; // {position:[x,y,z], normal:[nx,ny,nz]}

    // Utility to set a hotspot's position/normal (model-viewer expects strings)
    function setHotspot(el, pos, nrm){
      el.dataset.position = `${pos[0]} ${pos[1]} ${pos[2]}`;
      el.dataset.normal   = `${nrm[0]} ${nrm[1]} ${nrm[2]}`;
    }

    // Given a surface hit (position+normal), place entry and estimated exit
    function placePins(hit){
      // Entry pin at the exact hit
      setHotspot(pinEntry, hit.position, hit.normal);
      pinEntry.style.display = '';

      // Estimate exit: extend *through* the deer along the opposite normal.
      // We don't have the mesh thickness here, so we project a line ~1.2m.
      // (Good enough on whitetail ‚Äî you can tweak length below.)
      const length = 1.2; // meters; adjust if your model is scaled differently
      const exit = [
        hit.position[0] - hit.normal[0]*length,
        hit.position[1] - hit.normal[1]*length,
        hit.position[2] - hit.normal[2]*length
      ];
      const nOpp = hit.normal.map(v => -v);

      setHotspot(pinExit, exit, nOpp);
      pinExit.style.display = '';
    }

    // Pointer/tap -> compute surface point using model-viewer helper
    function handlePick(pixelX, pixelY){
      if (locked) return; // don‚Äôt move while locked
      const hit = mv.positionAndNormalFromPoint(pixelX, pixelY);
      if (!hit) return;   // tapped empty space
      lastHit = hit;
      placePins(hit);
    }

    // Desktop click
    mv.addEventListener('click', (ev) => {
      const rect = mv.getBoundingClientRect();
      handlePick(ev.clientX - rect.left, ev.clientY - rect.top);
    });

    // Mobile tap
    mv.addEventListener('touchend', (ev) => {
      if (ev.changedTouches.length){
        const t = ev.changedTouches[0];
        const rect = mv.getBoundingClientRect();
        handlePick(t.clientX - rect.left, t.clientY - rect.top);
      }
    }, {passive:true});

    // Lock/Unlock
    toggleLock.addEventListener('click', () => {
      locked = !locked;
      toggleLock.setAttribute('aria-pressed', String(locked));
      toggleLock.textContent = locked ? 'üîì Unlock pin' : 'üîí Lock pin';
    });

    // Clear
    clearBtn.addEventListener('click', () => {
      locked = false;
      toggleLock.setAttribute('aria-pressed', 'false');
      toggleLock.textContent = 'üîí Lock pin';
      pinEntry.style.display = 'none';
      pinExit.style.display = 'none';
      lastHit = null;
    });

    // Vitals mode (stub ‚Äì ready to hook to a vitals mesh later)
    let vitalsOn = false;
    toggleVitals.addEventListener('click', () => {
      vitalsOn = !vitalsOn;
      toggleVitals.setAttribute('aria-pressed', String(vitalsOn));
      // When your GLB has a "Vitals" mesh, you can toggle visibility like this:
      // const mesh = mv.model?.getMaterialByName('Vitals')?.pbrMetallicRoughness?.baseColorFactor = [...]
      // For now we just pulse the exposure a bit to show the toggle works.
      mv.exposure = vitalsOn ? 1.2 : 1.05;
    });

    helpBtn.addEventListener('click', () => {
      alert(
`How to use:
1) Tap the deer to drop the red Entry pin.
2) An Estimated Exit (white) appears opposite the entry along the shot path.
3) Tap ‚ÄúLock pin‚Äù to keep pins fixed while you rotate/zoom the deer.
4) Tap again (unlocked) to move the pins. Use ‚ÄúClear‚Äù to start over.

Note: Exit is an estimate (projects through the body lengthwise). 
We‚Äôll upgrade this later to use the exact mesh thickness for perfect exits.`
      );
    });
  </script>
</body>
</html>
